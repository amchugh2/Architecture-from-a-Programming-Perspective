#include "big-bits.h"
#include "hex-util.h"

#include <assert.h>
#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/** Provide concrete definition for struct BigBits to flesh out
 * abstract BigBits data type.
 */
struct BigBits {
  //array of char with numUnits units dynamically allocated when initializd
  int numUnits;
  const char *bigBits;
};



/** Return a pointer to a representation of a big integer with value
 * corresponding to the non-empty hexadecimal string hex. Note that
 * hex will only contain hexadecimal characters '0' - '9', 'a' - 'f'
 * and 'A' - 'F' terminated by a NUL '\0' char.
 *
 * The string hex may not remain valid after this function returns.
 *
 * Returns NULL on error with errno set "appropriately".
 */
const BigBits *
newBigBits(const char *hex)
{
  assert(CHAR_BIT == 8);
  //size of string
  size_t numUnits=strlen(hex)+1;
  char * val = (char *)malloc(numUnits);
  if(val==NULL) {
    fprintf(stderr,"memory not able to be allocated in newBigBits %d\n",errno);
    return NULL;
  }
  //big endian order
  for(int x=0; x<numUnits; x++){
    val[x]=hex[x];
  }

  //represent as a pointer
  char *pointRep = val;


  //do i need to check for null error here
  struct BigBits * bigBit = (struct BigBits *)malloc(sizeof(*bigBit));
  if(bigBit==NULL) {
    fprintf(stderr,"memory not able to be allocated in newBigBits %d\n",errno);
    return NULL;
  }
  bigBit -> numUnits=numUnits;
  bigBit -> bigBits=pointRep;

  return bigBit;
  //return NULL
}

/** Frees all resources used by currently valid bigBits. bigBits
 * is not valid after this function returns.
 */
void
freeBigBits(BigBits *bigBits)
{
  //@TODO
  free(bigBits);
}


/** Return a lower-case hex string representing bigBits. Returned
 * string should not contain any non-significant leading zeros.
 * Returns NULL on error with errno set "appropriately". (
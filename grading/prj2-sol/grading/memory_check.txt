==8580== Memcheck, a memory error detector
==8580== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8580== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==8580== Command: ./big-bits
==8580== Parent PID: 3856
==8580== 
==8580== Invalid write of size 1
==8580==    at 0x109D6F: newBigBits (big-bits.c:55)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a412bd is 0 bytes after a block of size 61 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid read of size 1
==8580==    at 0x10A5CF: orBigBits (big-bits.c:341)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x109900: doLine (main.c:206)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a413cc is 0 bytes after a block of size 28 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid write of size 1
==8580==    at 0x10A5EF: orBigBits (big-bits.c:341)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x109900: doLine (main.c:206)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a413cc is 0 bytes after a block of size 28 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid read of size 1
==8580==    at 0x10A665: orBigBits (big-bits.c:349)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x109900: doLine (main.c:206)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a412bd is 0 bytes after a block of size 61 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid read of size 1
==8580==    at 0x10A677: orBigBits (big-bits.c:349)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x109900: doLine (main.c:206)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a413cc is 0 bytes after a block of size 28 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid write of size 1
==8580==    at 0x10A697: orBigBits (big-bits.c:349)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x109900: doLine (main.c:206)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a414ed is 0 bytes after a block of size 61 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x10A566: orBigBits (big-bits.c:335)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x109900: doLine (main.c:206)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid read of size 1
==8580==    at 0x10A8C3: xorBigBits (big-bits.c:396)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x10995B: doLine (main.c:214)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a41536 is 0 bytes after a block of size 6 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid write of size 1
==8580==    at 0x10A8E3: xorBigBits (big-bits.c:396)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x10995B: doLine (main.c:214)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a41536 is 0 bytes after a block of size 6 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid read of size 1
==8580==    at 0x10A959: xorBigBits (big-bits.c:404)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x10995B: doLine (main.c:214)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a414ed is 0 bytes after a block of size 61 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x10A566: orBigBits (big-bits.c:335)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x109900: doLine (main.c:206)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid read of size 1
==8580==    at 0x10A96B: xorBigBits (big-bits.c:404)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x10995B: doLine (main.c:214)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a41536 is 0 bytes after a block of size 6 alloc'd
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
==8580== Invalid write of size 1
==8580==    at 0x10A98B: xorBigBits (big-bits.c:404)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x10995B: doLine (main.c:214)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580==  Address 0x4a4165d is 0 bytes after a block of size 61 alloc'd
==8580==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==8580==    by 0x10A829: xorBigBits (big-bits.c:386)
==8580==    by 0x10966B: doOp (main.c:142)
==8580==    by 0x10995B: doLine (main.c:214)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
==8580== 
--8580-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--8580-- si_code=128;  Faulting address: 0x0;  sp: 0x1002fa9e50

valgrind: the 'impossible' happened:
   Killed by fatal signal

host stacktrace:
==8580==    at 0x5805259C: get_bszB_as_is (m_mallocfree.c:303)
==8580==    by 0x5805259C: get_bszB (m_mallocfree.c:315)
==8580==    by 0x5805259C: vgPlain_arena_malloc (m_mallocfree.c:1799)
==8580==    by 0x58005AD2: vgMemCheck_new_block (mc_malloc_wrappers.c:372)
==8580==    by 0x58005AD2: vgMemCheck_malloc (mc_malloc_wrappers.c:407)
==8580==    by 0x580A7883: do_client_request (scheduler.c:1925)
==8580==    by 0x580A7883: vgPlain_scheduler (scheduler.c:1488)
==8580==    by 0x580F5D80: thread_wrapper (syswrap-linux.c:103)
==8580==    by 0x580F5D80: run_a_thread_NORETURN (syswrap-linux.c:156)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 8580)
==8580==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==8580==    by 0x109D13: newBigBits (big-bits.c:49)
==8580==    by 0x1098A5: doLine (main.c:195)
==8580==    by 0x109C48: go (main.c:285)
==8580==    by 0x109CE0: main (main.c:300)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFF000550
valgrind stack range: [0x1002EAA000 0x1002FA9FFF] top usage: 18344 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

